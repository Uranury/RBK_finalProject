// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/guns": {
            "get": {
                "description": "Get a list of all available guns in the system",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "skins"
                ],
                "summary": "Get all available guns",
                "responses": {
                    "200": {
                        "description": "List of available guns",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Gun"
                            }
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Login with email and password to receive JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Authenticate user",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/marketplace/orders/{order_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get details of a specific order by ID (only if owned by the user)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "marketplace"
                ],
                "summary": "Get order details",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Order ID",
                        "name": "order_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order details",
                        "schema": {
                            "$ref": "#/definitions/models.Order"
                        }
                    },
                    "400": {
                        "description": "Invalid order ID",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - order not owned by user",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/marketplace/purchase": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Purchase a skin from the marketplace using user's balance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "marketplace"
                ],
                "summary": "Purchase a skin",
                "parameters": [
                    {
                        "description": "Purchase request",
                        "name": "purchase",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.purchaseRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Purchase successful",
                        "schema": {
                            "$ref": "#/definitions/models.Order"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Skin not available",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Insufficient funds",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/marketplace/sell": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Sell a skin that you own. Price must be \u003e 0 and \u003c= 1,000,000.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "marketplace"
                ],
                "summary": "Sell a skin",
                "parameters": [
                    {
                        "description": "Sell request",
                        "name": "sell",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.sellRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "UUID of listed skin",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request (e.g., invalid skinID, invalid price, skin already listed)",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden: skin ownership required",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Skin not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/marketplace/skins": {
            "get": {
                "description": "Get all skins available for purchase in the marketplace",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "marketplace"
                ],
                "summary": "List available skins",
                "responses": {
                    "200": {
                        "description": "List of available skins",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Skin"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/marketplace/skins/mine": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all skins owned by the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "marketplace"
                ],
                "summary": "List user's skins",
                "responses": {
                    "200": {
                        "description": "List of user's skins",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Skin"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/marketplace/skins/remove": {
            "get": {
                "description": "Remove a user's skin from listing",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "marketplace"
                ],
                "summary": "Remove a skin",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Skin ID to remove from listing",
                        "name": "skin_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Skin ID removed successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Skin not available",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve the authenticated user's profile information (name, email, balance)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "User profile data",
                        "schema": {
                            "$ref": "#/definitions/models.UserProfile"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/signup": {
            "post": {
                "description": "Create a new user account with email, password, and name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserSignupRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "User already exists",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/skins": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new skin and add it to the marketplace. Wear is automatically calculated based on condition.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "skins"
                ],
                "summary": "Create a new skin",
                "parameters": [
                    {
                        "description": "Skin creation data",
                        "name": "skin",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.createSkinRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Skin created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Skin"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transactions/deposit": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deposit a specified amount to the user's balance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Deposit money to balance",
                "parameters": [
                    {
                        "description": "Deposit request",
                        "name": "deposit",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DepositRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deposit successful",
                        "schema": {
                            "$ref": "#/definitions/models.Transaction"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transactions/history": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the transaction history for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Get transaction history",
                "responses": {
                    "200": {
                        "description": "Transaction history",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Transaction"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transactions/withdraw": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Withdraw a specified amount from the user's balance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Withdraw money from balance",
                "parameters": [
                    {
                        "description": "Withdrawal request",
                        "name": "withdrawal",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.WithdrawRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Withdrawal successful",
                        "schema": {
                            "$ref": "#/definitions/models.Transaction"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Insufficient funds",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/wears": {
            "get": {
                "description": "Get a list of all available wear levels in the system",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "skins"
                ],
                "summary": "Get all available wear levels",
                "responses": {
                    "200": {
                        "description": "List of available wear levels",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Wear"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "details": {
                    "description": "Field-specific validation errors",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "error": {
                    "type": "string"
                }
            }
        },
        "handlers.createSkinRequest": {
            "type": "object",
            "required": [
                "condition",
                "gun",
                "name",
                "price",
                "rarity"
            ],
            "properties": {
                "condition": {
                    "type": "number"
                },
                "gun": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "rarity": {
                    "type": "string"
                }
            }
        },
        "handlers.purchaseRequest": {
            "type": "object",
            "required": [
                "skin_id"
            ],
            "properties": {
                "skin_id": {
                    "type": "string"
                }
            }
        },
        "handlers.sellRequest": {
            "type": "object",
            "required": [
                "price",
                "skin_id"
            ],
            "properties": {
                "price": {
                    "type": "number",
                    "maximum": 1000000
                },
                "skin_id": {
                    "type": "string"
                }
            }
        },
        "models.DepositRequest": {
            "type": "object",
            "required": [
                "amount"
            ],
            "properties": {
                "amount": {
                    "type": "number"
                }
            }
        },
        "models.Gun": {
            "type": "string",
            "enum": [
                "AK-47",
                "M4A4",
                "M4A1-S",
                "Desert Eagle",
                "USP-S",
                "Glock-18",
                "P250",
                "Tec-9",
                "CZ75-Auto",
                "AWP",
                "SSG 08",
                "SCAR-20",
                "G3SG1",
                "MP9",
                "MAC-10",
                "MP7",
                "P90",
                "UMP-45",
                "PP-Bizon",
                "Nova",
                "XM1014",
                "MAG-7",
                "Sawed-Off",
                "M249",
                "Negev",
                "Karambit",
                "Butterfly Knife",
                "M9 Bayonet",
                "Bayonet",
                "Flip Knife",
                "Gut Knife",
                "Huntsman Knife",
                "Shadow Daggers",
                "Falchion Knife",
                "Bowie Knife",
                "Navaja Knife",
                "Stiletto Knife",
                "Ursus Knife",
                "Nomad Knife",
                "Paracord Knife",
                "Survival Knife",
                "Classic Knife"
            ],
            "x-enum-varnames": [
                "AK47",
                "M4A4",
                "M4A1S",
                "DesertEagle",
                "USPS",
                "Glock18",
                "P250",
                "Tec9",
                "CZ75",
                "AWP",
                "SSG08",
                "SCAR20",
                "G3SG1",
                "MP9",
                "MAC10",
                "MP7",
                "P90",
                "UMP45",
                "PPBizon",
                "Nova",
                "XM1014",
                "MAG7",
                "SawedOff",
                "M249",
                "Negev",
                "Karambit",
                "Butterfly",
                "M9Bayonet",
                "Bayonet",
                "FlipKnife",
                "GutKnife",
                "Huntsman",
                "ShadowDaggers",
                "Falchion",
                "Bowie",
                "Navaja",
                "Stiletto",
                "Ursus",
                "Nomad",
                "Paracord",
                "Survival",
                "Classic"
            ]
        },
        "models.Order": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.OrderStatus"
                },
                "totalAmount": {
                    "type": "number"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "models.OrderStatus": {
            "type": "string",
            "enum": [
                "pending",
                "completed",
                "failed",
                "cancelled"
            ],
            "x-enum-comments": {
                "OrderStatusFailed": "Add this - when payment/processing fails"
            },
            "x-enum-varnames": [
                "OrderStatusPending",
                "OrderStatusCompleted",
                "OrderStatusFailed",
                "OrderStatusCancelled"
            ]
        },
        "models.Skin": {
            "type": "object",
            "properties": {
                "available": {
                    "type": "boolean"
                },
                "condition": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "gun": {
                    "$ref": "#/definitions/models.Gun"
                },
                "id": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner_id": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "rarity": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "wear": {
                    "$ref": "#/definitions/models.Wear"
                }
            }
        },
        "models.Transaction": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "balance_after": {
                    "type": "number"
                },
                "balance_before": {
                    "type": "number"
                },
                "counterparty_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "order_id": {
                    "type": "string"
                },
                "skin_id": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/models.TransactionType"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.TransactionType": {
            "type": "string",
            "enum": [
                "withdraw",
                "deposit",
                "purchase",
                "sale"
            ],
            "x-enum-varnames": [
                "Withdraw",
                "Deposit",
                "Purchase",
                "Sale"
            ]
        },
        "models.UserLoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "models.UserProfile": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "number"
                },
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.UserSignupRequest": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "models.Wear": {
            "type": "string",
            "enum": [
                "Factory New",
                "Minimal Wear",
                "Field-Tested",
                "Well-Worn",
                "Battle-Scarred"
            ],
            "x-enum-varnames": [
                "FactoryNew",
                "MinimalWear",
                "FieldTested",
                "WellWorn",
                "BattleScarred"
            ]
        },
        "models.WithdrawRequest": {
            "type": "object",
            "required": [
                "amount"
            ],
            "properties": {
                "amount": {
                    "type": "number"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "CS:GO Skin Marketplace API",
	Description:      "A marketplace API for buying and selling CS:GO skins",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
